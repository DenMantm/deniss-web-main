[
    {
        "id": 0,
        "group": "ang2",
        "groupName": "Angular2",
        "snippets": [
            {
                "titleText": "My New snippet here",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "<h3>Code element description -&gt;</h3>"
                    },
                    {
                        "id": 1,
                        "type": "p",
                        "style": null,
                        "text": "<p>This is paragraph entery</p>"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "<p></p><pre class=\"prettyprint prettyprinted\" style=\"\"><p><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">root</span><span class=\"pun\">,</span><span class=\"pln\"> factory</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">  </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">typeof</span><span class=\"pln\"> </span><span class=\"kwd\">module</span><span class=\"pln\"> </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"str\">'object'</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">    </span><span class=\"kwd\">module</span><span class=\"pun\">.</span><span class=\"pln\">exports </span><span class=\"pun\">=</span><span class=\"pln\"> factory</span><span class=\"pun\">;</span></p><p><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">typeof</span><span class=\"pln\"> define </span><span class=\"pun\">===</span><span class=\"pln\"> </span><span class=\"str\">'function'</span><span class=\"pln\"> </span><span class=\"pun\">&amp;&amp;</span><span class=\"pln\"> define</span><span class=\"pun\">.</span><span class=\"pln\">amd</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">    define</span><span class=\"pun\">(</span><span class=\"pln\">factory</span><span class=\"pun\">);</span></p><p><span class=\"pln\">  </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">    root</span><span class=\"pun\">.</span><span class=\"typ\">MediumEditorPhrase</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> factory</span><span class=\"pun\">;</span></p><p><span class=\"pln\">  </span><span class=\"pun\">}</span></p><p><span class=\"pun\">}(</span><span class=\"kwd\">this</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">function</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">MediumEditor</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">  </span><span class=\"kwd\">const</span><span class=\"pln\"> placeholderText </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">''</span><span class=\"pun\">,</span></p><p><span class=\"pln\">    placeholderHtml </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">'&lt;div data-phrase-placeholder=\"true\"&gt;&lt;/div&gt;'</span><span class=\"pun\">,</span></p><p><span class=\"pln\">    placeholderSelector </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">'div[data-phrase-placeholder=\"true\"]'</span><span class=\"pun\">;</span></p><p><span class=\"pln\">  </span><span class=\"com\">/**</span></p><p><span class=\"com\">   * @param {string} html</span></p><p><span class=\"com\">   * @returns {string}</span></p><p><span class=\"com\">   */</span></p><p><span class=\"pln\">  </span><span class=\"kwd\">function</span><span class=\"pln\"> stripPlaceholderText</span><span class=\"pun\">(</span><span class=\"pln\">html</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></p><p><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> html</span><span class=\"pun\">.</span><span class=\"pln\">split</span><span class=\"pun\">(</span><span class=\"pln\">placeholderText</span><span class=\"pun\">).</span><span class=\"kwd\">join</span><span class=\"pun\">(</span><span class=\"str\">''</span><span class=\"pun\">);</span></p><p><span class=\"pln\">  </span><span class=\"pun\">}</span></p><p><span class=\"com\">  return MediumEditor.extensions.button.extend({</span></p><p><span class=\"com\">    // default values can be overwritten by options on init</span></p><p><span class=\"com\">    phraseTagName: 'span', // lowercase tagName of the phrase tag</span></p><p><span class=\"com\">    phraseClassList: [], // classes applied to each phrase tag</span></p><p><span class=\"com\">    name: 'phrase', // name used to reference the button from Medium Editor</span></p><p><span class=\"com\">    contentDefault: 'S', // html visible to the user in the toolbar button</span></p><p><span class=\"com\">    aria: 'Span Button', // aria label</span></p><p><span class=\"com\">    classList: [], // classes added to the button</span></p><p><span class=\"com\">    init: function () {</span></p><p><span class=\"com\">      MediumEditor.Extension.prototype.init.apply(this, arguments);</span></p><p><span class=\"com\">      // properties not set in options</span></p><p><span class=\"com\">      this.useQueryState = false; // cannot rely on document.queryCommandState()</span></p><p><span class=\"com\">      this.phraseHasNoClass = this.phraseClassList.length === 0;</span></p><p><span class=\"com\">      this.phraseSelector = this.phraseTagName + this.phraseClassList.reduce((selector, className) =&gt; selector + '.' + className, '');</span></p><p><span class=\"com\">      this.openingTag = `&lt;${ this.phraseTagName }${ this.phraseHasNoClass ? '' : ' class=\"' + this.phraseClassList.join(' ').trim() + '\"' }&gt;`;</span></p><p><span class=\"com\">      this.closingTag = `&lt;/${ this.phraseTagName }&gt;`;</span></p><p><span class=\"com\">      this.button = this.createButton();</span></p><p><span class=\"com\">      this.on(this.button, 'click', this.handleClick.bind(this));</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * returns a clone of the selection inside a `div` container</span></p><p><span class=\"com\">     * @returns {Element}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    cloneSelection: function () {</span></p><p><span class=\"com\">      var range = MediumEditor.selection.getSelectionRange(this.document),</span></p><p><span class=\"com\">        container = document.createElement('div');</span></p><p><span class=\"com\">      container.appendChild(range.cloneContents());</span></p><p><span class=\"com\">      return container;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * check if the node is a phrase</span></p><p><span class=\"com\">     * @param {Node} node</span></p><p><span class=\"com\">     * @returns {boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    isPhraseNode: function (node) {</span></p><p><span class=\"com\">      return !!(</span></p><p><span class=\"com\">        node &amp;&amp;</span></p><p><span class=\"com\">        node.tagName.toLowerCase() === this.phraseTagName &amp;&amp;</span></p><p><span class=\"com\">        (this.phraseHasNoClass ? !node.className : this.phraseClassList.reduce((hasAll, c) =&gt; hasAll &amp;&amp; node.classList.contains(c), true))</span></p><p><span class=\"com\">      );</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Element} phrase</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    removePhraseTags: function (phrase) {</span></p><p><span class=\"com\">      phrase.outerHTML = phrase.innerHTML;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {string} phrase</span></p><p><span class=\"com\">     * @returns {string}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    addPhraseTags: function (phrase) {</span></p><p><span class=\"com\">      var closingTagsAtStart = '',</span></p><p><span class=\"com\">        openingTagsAtEnd = '';</span></p><p><span class=\"com\">      // innerHTML sometimes returns fragments that start or end</span></p><p><span class=\"com\">      // with tags that we do not want to wrap in the phrase tags.</span></p><p><span class=\"com\">      // e.g. `a&lt;b&gt;` should become `&lt;span&gt;a&lt;/span&gt;&lt;b&gt;`</span></p><p><span class=\"com\">      // e.g. `&lt;/b&gt;a` should become `&lt;/b&gt;&lt;span&gt;a&lt;/span&gt;`</span></p><p><span class=\"com\">      phrase = phrase.replace(/^(&lt;\\/[^&gt;]+&gt;)*/, function (match) {</span></p><p><span class=\"com\">        closingTagsAtStart = match;</span></p><p><span class=\"com\">        return '';</span></p><p><span class=\"com\">      }).replace(/(&lt;[^\\/&gt;]+&gt;)*$/, function (match) {</span></p><p><span class=\"com\">        openingTagsAtEnd = match;</span></p><p><span class=\"com\">        return '';</span></p><p><span class=\"com\">      });</span></p><p><span class=\"com\">      // only add phrase tags if there is phrase text</span></p><p><span class=\"com\">      if (phrase) {</span></p><p><span class=\"com\">        phrase = this.openingTag + phrase + this.closingTag;</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">      return closingTagsAtStart + phrase + openingTagsAtEnd;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Node} container</span></p><p><span class=\"com\">     * @returns {Array} Array of phrase elements that are in the container</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    getSelectionPhrases: function (container) {</span></p><p><span class=\"com\">      var selectionPhrases = Array.prototype.slice.call(container.querySelectorAll(this.phraseSelector));</span></p><p><span class=\"com\">      if (this.phraseHasNoClass) {</span></p><p><span class=\"com\">        selectionPhrases = selectionPhrases.filter(phrase =&gt; !phrase.className); // ensure phrases have no className</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">      return selectionPhrases;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * replaces the selection with new html and selects the new html</span></p><p><span class=\"com\">     * @param {string} html</span></p><p><span class=\"com\">     * @param {boolean} [shouldSelectHtml]</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    replaceSelectionHtml: function (html, shouldSelectHtml) {</span></p><p><span class=\"com\">      var fragment,</span></p><p><span class=\"com\">        range = MediumEditor.selection.getSelectionRange(this.document),</span></p><p><span class=\"com\">        selection = this.document.getSelection();</span></p><p><span class=\"com\">      // insert html</span></p><p><span class=\"com\">      range.deleteContents();</span></p><p><span class=\"com\">      fragment = range.createContextualFragment(html);</span></p><p><span class=\"com\">      range.insertNode(fragment);</span></p><p><span class=\"com\">      // remove selection</span></p><p><span class=\"com\">      selection.removeAllRanges();</span></p><p><span class=\"com\">      // select html</span></p><p><span class=\"com\">      if (shouldSelectHtml !== false) {</span></p><p><span class=\"com\">        if (fragment.firstChild) {</span></p><p><span class=\"com\">          range.setStartBefore(fragment.firstChild);</span></p><p><span class=\"com\">          range.setEndAfter(fragment.lastChild);</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">        selection.addRange(range);</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * get the innerHTML or textContent</span></p><p><span class=\"com\">     * @param {Node} node</span></p><p><span class=\"com\">     * @returns {string}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    getNodeHtml: function (node) {</span></p><p><span class=\"com\">      switch (node.nodeType) {</span></p><p><span class=\"com\">        case Node.ELEMENT_NODE:</span></p><p><span class=\"com\">          return node.innerHTML;</span></p><p><span class=\"com\">        case Node.TEXT_NODE:</span></p><p><span class=\"com\">          return node.textContent;</span></p><p><span class=\"com\">        default:</span></p><p><span class=\"com\">          return node.innerHTML || node.textContent || '';</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * check if the selection has a phrase as a child or ancestor</span></p><p><span class=\"com\">     * @returns {boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    isAlreadyApplied: function () {</span></p><p><span class=\"com\">      return this.hasSelectionPhrase() || !!this.getAncestorPhrase();</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * this is necessary because safari will only select text nodes</span></p><p><span class=\"com\">     * @param {Node} node - the placeholder will be inserted before or after this node</span></p><p><span class=\"com\">     * @param {boolean} after - if true, insert after</span></p><p><span class=\"com\">     * @returns {Node}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    insertTextNodePlaceholder: function (node, after) {</span></p><p><span class=\"com\">      return node.parentNode.insertBefore(this.document.createTextNode(placeholderText), after ? node.nextSibling : node);</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Node} node - the placeholder will be inserted before this node</span></p><p><span class=\"com\">     * @returns {Node}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    insertTextNodePlaceholderBefore: function (node) {</span></p><p><span class=\"com\">      return this.insertTextNodePlaceholder(node);</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Node} node - the placeholder will be inserted after this node</span></p><p><span class=\"com\">     * @returns {Node}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    insertTextNodePlaceholderAfter: function (node) {</span></p><p><span class=\"com\">      return this.insertTextNodePlaceholder(node, true);</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * html before and after the selection remain phrases,</span></p><p><span class=\"com\">     * a placeholder text node becomes the selected range,</span></p><p><span class=\"com\">     * and the selection html is returned.</span></p><p><span class=\"com\">     * @param {Element} ancestorPhrase</span></p><p><span class=\"com\">     * @returns {string}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    removeAncestorPhrase: function (ancestorPhrase) {</span></p><p><span class=\"com\">      var ancestorPhraseParent = ancestorPhrase.parentNode,</span></p><p><span class=\"com\">        selectionHtml = this.getNodeHtml(this.cloneSelection()),</span></p><p><span class=\"com\">        selection = this.document.getSelection(),</span></p><p><span class=\"com\">        range = this.document.createRange(),</span></p><p><span class=\"com\">        placeholderEl,</span></p><p><span class=\"com\">        textNodePlaceholder;</span></p><p><span class=\"com\">      // use the placeholder to update the html before and after the selection</span></p><p><span class=\"com\">      this.replaceSelectionHtml(placeholderHtml, false);</span></p><p><span class=\"com\">      ancestorPhrase.outerHTML = ancestorPhrase.cloneNode(true).innerHTML.split(placeholderHtml)</span></p><p><span class=\"com\">        // add phrase tags to fragments before and after selection</span></p><p><span class=\"com\">        .map(phrase =&gt; phrase &amp;&amp; this.addPhraseTags(phrase))</span></p><p><span class=\"com\">        // re-insert placeholder where selection was</span></p><p><span class=\"com\">        .join(placeholderHtml);</span></p><p><span class=\"com\">      // select a text node where the original selection needs to be re-inserted</span></p><p><span class=\"com\">      selection.removeAllRanges();</span></p><p><span class=\"com\">      placeholderEl = ancestorPhraseParent.querySelector(placeholderSelector);</span></p><p><span class=\"com\">      textNodePlaceholder = this.insertTextNodePlaceholderAfter(placeholderEl);</span></p><p><span class=\"com\">      placeholderEl.parentNode.removeChild(placeholderEl);</span></p><p><span class=\"com\">      range.selectNode(textNodePlaceholder); // selects text node because safari only allows selection of text nodes.</span></p><p><span class=\"com\">      selection.addRange(range);</span></p><p><span class=\"com\">      // return the selection html</span></p><p><span class=\"com\">      return selectionHtml;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Node} node</span></p><p><span class=\"com\">     * @param {Node} ancestorNode</span></p><p><span class=\"com\">     * @returns {boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    isLastDescendantTextNode: function (node, ancestorNode) {</span></p><p><span class=\"com\">      var n, nodeFound,</span></p><p><span class=\"com\">        isLastDescendant = true,</span></p><p><span class=\"com\">        walk = this.document.createTreeWalker(ancestorNode, NodeFilter.SHOW_TEXT, null, false);</span></p><p><span class=\"com\">      while (n = walk.nextNode() &amp;&amp; isLastDescendant) {</span></p><p><span class=\"com\">        if (nodeFound) {</span></p><p><span class=\"com\">          isLastDescendant = false;</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">        if (n === node) {</span></p><p><span class=\"com\">          nodeFound = true;</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">      return isLastDescendant;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * @param {Node} node</span></p><p><span class=\"com\">     * @param {Node} ancestorNode</span></p><p><span class=\"com\">     * @returns {boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    isFirstDescendantTextNode: function (node, ancestorNode) {</span></p><p><span class=\"com\">      var firstDescendantTextNode = this.document.createTreeWalker(ancestorNode, NodeFilter.SHOW_TEXT, null, false).firstChild();</span></p><p><span class=\"com\">      return node === firstDescendantTextNode;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * if the range starts outside of the phrase and ends at the end of the phrase,</span></p><p><span class=\"com\">     * or starts at the beginning of the phrase and ends outside of the phrase,</span></p><p><span class=\"com\">     * then we need to make sure that the range contains the entire phrase</span></p><p><span class=\"com\">     * so that the phrase tags are removed.</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    ensurePhraseSelected: function () {</span></p><p><span class=\"com\">      var selection = this.window.getSelection(),</span></p><p><span class=\"com\">        range = MediumEditor.selection.getSelectionRange(this.document),</span></p><p><span class=\"com\">        startContainer = range.startContainer,</span></p><p><span class=\"com\">        startOffset = range.startOffset,</span></p><p><span class=\"com\">        endContainer = range.endContainer,</span></p><p><span class=\"com\">        endOffset = range.endOffset,</span></p><p><span class=\"com\">        hasMultipleContainersSelected = endContainer !== startContainer,</span></p><p><span class=\"com\">        hasFullySelectedEndContainer = endContainer.nodeType === Node.TEXT_NODE &amp;&amp; endOffset === endContainer.textContent.length,</span></p><p><span class=\"com\">        hasFullySelectedStartContainer = startContainer.nodeType === Node.TEXT_NODE &amp;&amp; startOffset === 0,</span></p><p><span class=\"com\">        rangeContainingAncestorPhrase = this.document.createRange(),</span></p><p><span class=\"com\">        containerAncestorPhrase,</span></p><p><span class=\"com\">        textNodePlaceholder;</span></p><p><span class=\"com\">      if (hasMultipleContainersSelected) {</span></p><p><span class=\"com\">        if (hasFullySelectedEndContainer) {</span></p><p><span class=\"com\">          containerAncestorPhrase = MediumEditor.util.traverseUp(endContainer, this.isPhraseNode.bind(this));</span></p><p><span class=\"com\">          if (containerAncestorPhrase &amp;&amp; this.isLastDescendantTextNode(endContainer, containerAncestorPhrase)) {</span></p><p><span class=\"com\">            textNodePlaceholder = this.insertTextNodePlaceholderAfter(containerAncestorPhrase);</span></p><p><span class=\"com\">            rangeContainingAncestorPhrase.setStart(startContainer, startOffset);</span></p><p><span class=\"com\">            rangeContainingAncestorPhrase.setEnd(textNodePlaceholder.parentNode, getChildOffset(textNodePlaceholder));</span></p><p><span class=\"com\">          }</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">        if (hasFullySelectedStartContainer) {</span></p><p><span class=\"com\">          containerAncestorPhrase = MediumEditor.util.traverseUp(startContainer, this.isPhraseNode.bind(this));</span></p><p><span class=\"com\">          if (containerAncestorPhrase &amp;&amp; this.isFirstDescendantTextNode(startContainer, containerAncestorPhrase)) {</span></p><p><span class=\"com\">            rangeContainingAncestorPhrase.setStart(this.insertTextNodePlaceholderBefore(containerAncestorPhrase), 0);</span></p><p><span class=\"com\">            if (!textNodePlaceholder) {</span></p><p><span class=\"com\">              rangeContainingAncestorPhrase.setEnd(endContainer, endOffset); // only setEnd if it was not already set</span></p><p><span class=\"com\">            }</span></p><p><span class=\"com\">          }</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">        if (!rangeContainingAncestorPhrase.collapsed) { // there is a new range</span></p><p><span class=\"com\">          selection.removeAllRanges();</span></p><p><span class=\"com\">          selection.addRange(rangeContainingAncestorPhrase);</span></p><p><span class=\"com\">        }</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * get the HTML from the selected range and either add or remove the phrase tags.</span></p><p><span class=\"com\">     * @returns {string} HTML</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    togglePhraseTags: function () {</span></p><p><span class=\"com\">      var container, selectionPhrases, html;</span></p><p><span class=\"com\">      this.ensurePhraseSelected();</span></p><p><span class=\"com\">      container = this.cloneSelection();</span></p><p><span class=\"com\">      selectionPhrases = this.getSelectionPhrases(container);</span></p><p><span class=\"com\">      html = container.innerHTML;</span></p><p><span class=\"com\">      if (selectionPhrases.length) { // selection already has phrases, so remove them</span></p><p><span class=\"com\">        selectionPhrases.forEach(this.removePhraseTags); // remove phrases while keeping their innerHTML</span></p><p><span class=\"com\">        html = container.innerHTML;</span></p><p><span class=\"com\">      } else if (container.textContent) { // no phrases found and has textContent, so add phrase tags</span></p><p><span class=\"com\">        html = this.addPhraseTags(html);</span></p><p><span class=\"com\">      }</span></p><p><span class=\"com\">      return stripPlaceholderText(html); // placeholderText may have been added by this.ensurePhraseSelected()</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * traverse down from the selection to find at least one phrase</span></p><p><span class=\"com\">     * @returns {boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    hasSelectionPhrase: function () {</span></p><p><span class=\"com\">      return this.getSelectionPhrases(this.cloneSelection()).length &gt; 0;</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * traverse up from the selection to find the first ancestor phrase</span></p><p><span class=\"com\">     * @returns {Node|boolean}</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    getAncestorPhrase: function () {</span></p><p><span class=\"com\">      return MediumEditor.util.traverseUp(MediumEditor.selection.getSelectionRange(this.document).startContainer, this.isPhraseNode.bind(this));</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">    /**</span></p><p><span class=\"com\">     * when the button is clicked, update the html</span></p><p><span class=\"com\">     * @param {object} e</span></p><p><span class=\"com\">     */</span></p><p><span class=\"com\">    handleClick: function (e) {</span></p><p><span class=\"com\">      var ancestorPhrase = this.getAncestorPhrase();</span></p><p><span class=\"com\">      e.preventDefault();</span></p><p><span class=\"com\">      e.stopPropagation();</span></p><p><span class=\"com\">      this.replaceSelectionHtml(!ancestorPhrase || this.hasSelectionPhrase() ? this.togglePhraseTags() : this.removeAncestorPhrase(ancestorPhrase));</span></p><p><span class=\"com\">      this.isAlreadyApplied() ? this.setActive() : this.setInactive(); // update button state</span></p><p><span class=\"com\">      this.base.checkContentChanged(); // triggers 'editableInput' event</span></p><p><span class=\"com\">    },</span></p><p><span class=\"com\">  });</span></p><p><span class=\"com\">}(typeof require === 'function' ? require('medium-editor') : MediumEditor))));</span></p></pre><p></p>"
                    }
                ],
                "comments": null
            }
        ]
    },
    {
        "id": 1,
        "group": "plsql",
        "groupName": "PL/SQL",
        "snippets": [
            {
                "id": 0,
                "titleText": "Snippet 1",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            },
            {
                "id": 1,
                "titleText": "Snippet 2",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            },
            {
                "id": 2,
                "titleText": "Snippet 3",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            }
        ]
    },
    {
        "id": 2,
        "group": "java",
        "groupName": "JAVA",
        "snippets": [
            {
                "id": 0,
                "titleText": "Snippet 1",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            },
            {
                "id": 1,
                "titleText": "Snippet 2",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            },
            {
                "id": 2,
                "titleText": "Snippet 3",
                "elements": [
                    {
                        "id": 0,
                        "type": "div",
                        "style": null,
                        "text": "This is the title element"
                    },
                    {
                        "id": 1,
                        "type": "pre",
                        "style": null,
                        "text": "This is pre block element"
                    },
                    {
                        "id": 2,
                        "type": "div",
                        "style": null,
                        "text": "This is paragraph entery"
                    }
                ],
                "comments": null
            }
        ]
    }
]